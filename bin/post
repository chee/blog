#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const file = process.argv[2]
const filename = path.basename(file)
const exec = require('child_process').exec

const usage = `usage: ${process.argv[1]} <file>`

if (!file) {
  console.error(usage)
  process.exit(1)
}

function readWriteError(error) {
  console.error(error)
  process.exit(2)
}

const public = `${__dirname}/../public`
const blogs =  `${public}/blogs`
const postsdotjson = `${public}/posts.json`

const firstLine = new Promise((resolve, reject) => {
  exec(`head -1 ${file}`, (error, line) => (
    error && reject(error) || resolve(line)
  ))
}).catch(readWriteError)

const json = new Promise((resolve, reject) => {
  fs.readFile(postsdotjson, (error, data) => {
    if (error) reject(error)
    try {
      resolve(JSON.parse(data))
    } catch (error) {
      reject(error)
    }
  })
}).catch(readWriteError)

const writeJson = Promise.all([json, firstLine]).then(([posts, firstLine]) => {
  const title = firstLine.replace(/^#+ +/, '').replace(/\n/, '')
  const slug = title.replace(/[^0-9A-Za-z]+/g, '-').toLowerCase()
  const newfile = `${blogs}/${slug}.md`
  const moveFile = new Promise((resolve, reject) => {
    fs.rename(file, newfile, error => error && reject() || resolve())
  }).then(() => console.log(path.resolve(newfile))).catch(readWriteError)

  const post = posts.filter(post => post.slug == slug)

  if (post) return Promise.resolve()

  posts.push({
    date: (new Date).toISOString(),
    slug,
    title
  })

  return new Promise((resolve, reject) => {
    fs.writeFile(postsdotjson, JSON.stringify(posts), error => {
      if (error) reject(error)
      resolve()
    })
  })
})
