#!/usr/bin/env node
const firstline = require('firstline')
const fs = require('fs')
const path = require('path')
const file = process.argv[2]
const filename = path.basename(file)

const usage = `usage: ${process.argv[1]} <file>`

if (!file) {
  console.error(usage)
  process.exit(1)
}

function readWriteError(error) {
  console.error(error)
  process.exit(2)
}

const public = `${__dirname}/../public`
const blogs =  `${public}/blogs`
const postsdotjson = `${public}/posts.json`

const copyFile = new Promise((resolve, reject) => {
  let writeStream
  fs.createReadStream(file)
    .pipe(writeStream = fs.createWriteStream(`${blogs}/${filename}`))
    .on('close', () => resolve(writeStream))
    .on('error', error => reject(error))
}).catch(readWriteError)

const firstLine = firstline(file)

const json = new Promise((resolve, reject) => {
  fs.readFile(postsdotjson, (error, data) => {
    if (error) reject(error)
    try {
      resolve(JSON.parse(data))
    } catch (error) {
      reject(error)
    }
  })
}).catch(readWriteError)

const writeJson = Promise.all([json, firstLine, copyFile]).then(([posts, firstLine]) => {
  const title = firstLine.replace(/^# /, '')
  posts.push({
    date: (new Date).toISOString(),
    slug: title.replace(/[^0-9A-Za-z]+/g, '-').toLowerCase(),
    file: `/blogs/${filename}`,
    title
  })
  return new Promise((resolve, reject) => {
    fs.writeFile(postsdotjson, JSON.stringify(posts), error => {
      if (error) reject(error)
      resolve()
    })
  })
})
